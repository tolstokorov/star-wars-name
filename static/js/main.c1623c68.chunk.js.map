{"version":3,"sources":["api/star-wars/index.ts","store/actions/is-init.ts","store/actions/name.ts","store/thunk/get-one-people-name.ts","store/actions/people-count.ts","store/thunk/get-people-count.ts","components/app/app.tsx","components/app/index.tsx","store/reducers/people.ts","store/index.ts","index.tsx"],"names":["Resource","starWarsAPI","_resAPI","_isInit","init","a","axios","get","_baseResourceURL","catch","console","error","people","getAllData","_getResourceData","data","getData","id","this","resource","queryParams","res","_getResource","INIT","type","NAME","name","payload","getOnePeopleName","dispatch","COUNT","peopleCount","count","getPeopleCount","actions","App","connect","state","personName","emptyStr","isInit","startInputValue","useState","inputValue","setInputValue","isNameLoading","setIsNameLoading","isPeopleCountLoading","setIsPeopleCountLoading","wrong","setWrong","useEffect","then","min","max","value","onChange","e","str","currentTarget","initialState","action","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1623c68.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { OnePeople, People } from \"./people\";\r\n\r\nenum Resource {\r\n    people = 'people'\r\n};\r\n\r\nclass StarWarsAPI  {\r\n    _resAPI: AxiosResponse | null;\r\n    _isInit: boolean\r\n    constructor() {\r\n        this._resAPI = null;\r\n        this._isInit = false;\r\n    }\r\n    public init = async () => {\r\n        this._resAPI = await axios.get(this._baseResourceURL)\r\n            .catch(() => {\r\n                console.error('Сервер с внешним API не доступен!');\r\n                return null;\r\n            });\r\n        return this._isInit = true;\r\n    };\r\n\r\n    private readonly _baseResourceURL = 'https://swapi.dev/api/';\r\n      \r\n    private async _getResource(resource: Resource, id: string = '', queryParams: string = '') {\r\n        if(!this._resAPI) return null;\r\n        const res = await axios.get(`${this._baseResourceURL}${resource}/${id}${queryParams}`)\r\n            .catch(() => {\r\n                console.error('Ошибка в запросе!');\r\n                return null;\r\n            });\r\n\r\n        return res;\r\n    }\r\n\r\n    private async _getResourceData(resource: Resource, id: string = '', queryParams: string = '') {\r\n        const res: {\r\n            data: any\r\n        } | null = await this._getResource(resource, id, queryParams);\r\n\r\n        if(!res) return null\r\n\r\n        return res.data;\r\n    }\r\n\r\n    public people = {\r\n        getAllData : async () =>  {\r\n            const data = await this._getResourceData(Resource.people) as People | null;\r\n\r\n            return data;\r\n        },\r\n\r\n        getData : async(id: number) => {\r\n            const data = await this._getResourceData(Resource.people, `${id}/`) as OnePeople | null;\r\n            \r\n            return data;\r\n        }\r\n    };\r\n};\r\n\r\nconst starWarsAPI = new StarWarsAPI();\r\nexport default starWarsAPI;","const INIT = 'INIT';\r\n\r\ntype InitAction = {\r\n    type: typeof INIT\r\n};\r\n\r\nconst init = (): InitAction => ({\r\n    type: INIT\r\n});\r\ntype Init = typeof init; \r\n\r\nexport type {\r\n    InitAction,\r\n    Init,\r\n};\r\nexport {\r\n    INIT\r\n};\r\nexport default init;","import { StateName } from \"../reducers/people\";\r\n\r\nconst NAME = 'NAME';\r\n\r\ntype NameAction = {\r\n    type: typeof NAME\r\n    payload: StateName\r\n};\r\n\r\nconst name = (name: StateName): NameAction => ({\r\n    type: NAME,\r\n    payload: name\r\n});\r\ntype Name = typeof name; \r\n\r\nexport type {\r\n    NameAction,\r\n    Name,\r\n};\r\nexport {\r\n    NAME\r\n};\r\nexport default name;","import { ThunkAction } from \"redux-thunk\";\r\nimport starWarsAPI from \"../../api/star-wars\";\r\nimport { OnePeople } from \"../../api/star-wars/people\";\r\nimport name, { NameAction } from \"../actions/name\";\r\nimport { State } from \"../reducers/people\";\r\n\r\nconst getOnePeopleName = (id: number): ThunkAction<Promise<OnePeople | null>, State, unknown, NameAction> =>\r\n    async (dispatch) => {\r\n        const res = await starWarsAPI.people.getData(id);\r\n\r\n        if(!res) dispatch(name('Error'));\r\n        else dispatch(name(res.name));\r\n\r\n        return res;\r\n    };\r\ntype GetOnePeopleNameThunk = typeof getOnePeopleName;\r\ntype GetOnePeopleName = (id: number) => ReturnType<ReturnType<GetOnePeopleNameThunk>>;\r\n\r\nexport type {\r\n    GetOnePeopleNameThunk,\r\n    GetOnePeopleName,\r\n};\r\nexport default getOnePeopleName;","import { StateCount } from \"../reducers/people\";\r\n\r\nconst COUNT = 'COUNT';\r\n\r\ntype PeopleCountAction = {\r\n    type: typeof COUNT,\r\n    payload: StateCount\r\n};\r\n\r\nconst peopleCount = (count: StateCount): PeopleCountAction => ({\r\n    type: COUNT,\r\n    payload: count\r\n});\r\n// type PeopleCountActionCreator = (count: StateCount) => void;\r\n\r\nexport type {\r\n    PeopleCountAction,\r\n};\r\nexport {\r\n    COUNT\r\n};\r\nexport default peopleCount;","import { ThunkAction } from \"redux-thunk\";\r\nimport { State } from \"../reducers/people\";\r\nimport peopleCount, { PeopleCountAction } from \"../actions/people-count\";\r\nimport starWarsAPI from \"../../api/star-wars\";\r\nimport { People } from \"../../api/star-wars/people\";\r\n\r\nconst getPeopleCount = (): ThunkAction<Promise<People | null>, State, unknown, PeopleCountAction> =>\r\n    async (dispatch) => {\r\n        const res = await starWarsAPI.people.getAllData();\r\n\r\n        if(res) dispatch(peopleCount(res.count));\r\n\r\n        return res;\r\n    };\r\n\r\ntype GetPeopleCountThunk = typeof getPeopleCount;\r\ntype GetPeopleCount = () => ReturnType<ReturnType<GetPeopleCountThunk>>;\r\n\r\nexport type {\r\n    GetPeopleCountThunk,\r\n    GetPeopleCount,\r\n};\r\nexport default getPeopleCount;","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport starWarsAPI from \"../../api/star-wars\";\r\nimport { RootState } from \"../../store\";\r\nimport init, { Init } from \"../../store/actions/is-init\";\r\nimport name, { Name } from \"../../store/actions/name\";\r\nimport { StateCount, StateEmptyStr, StateName } from \"../../store/reducers/people\";\r\nimport getOnePeopleName, { GetOnePeopleName, GetOnePeopleNameThunk } from \"../../store/thunk/get-one-people-name\";\r\nimport getPeopleCount, { GetPeopleCount, GetPeopleCountThunk } from \"../../store/thunk/get-people-count\";\r\n\r\n\r\n\r\ntype InputValue = number | '';\r\ntype OwnAppProps = {\r\n    startInputValue: InputValue\r\n};\r\n\r\ntype AppState = {\r\n    personName: StateName\r\n    peopleCount: StateCount\r\n    emptyStr: StateEmptyStr\r\n    isInit: boolean\r\n};\r\n\r\ntype AppActions = {\r\n    name: Name\r\n    init: Init\r\n};\r\n\r\ntype AppThunk = {\r\n    getOnePeopleName: GetOnePeopleNameThunk\r\n    getPeopleCount: GetPeopleCountThunk\r\n};\r\n\r\ntype AppBoundInDispatchThunk = {\r\n    getOnePeopleName: GetOnePeopleName\r\n    getPeopleCount: GetPeopleCount\r\n}; \r\n\r\ntype AppProps = OwnAppProps & AppState & AppActions & AppBoundInDispatchThunk;\r\n\r\n\r\n\r\nconst App = ({\r\n    startInputValue,\r\n\r\n    personName,\r\n    peopleCount,\r\n    emptyStr,\r\n    isInit,\r\n\r\n    name,\r\n    init,\r\n    getOnePeopleName,\r\n    getPeopleCount,\r\n }: AppProps): JSX.Element => {\r\n\r\n    const [inputValue, setInputValue] = useState<InputValue>(startInputValue);\r\n    const [isNameLoading, setIsNameLoading] = useState(true);\r\n    const [isPeopleCountLoading, setIsPeopleCountLoading] = useState(true);\r\n    const [wrong, setWrong] = useState<string | null>(null);\r\n\r\n    const onInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const str = e.currentTarget.value;\r\n        \r\n        setWrong(null);\r\n\r\n        if(str === '') {\r\n            setInputValue(str);\r\n            name(emptyStr);\r\n            return;\r\n        }\r\n\r\n        if(+str !== 17 && +str > 0 && peopleCount && +str <= peopleCount)\r\n            setInputValue(+str);\r\n        else setWrong(str);\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        !isInit && starWarsAPI.init()\r\n            .then(() => {\r\n                init()\r\n            });\r\n\r\n        isInit && getPeopleCount()\r\n            .then(() => {\r\n                setIsPeopleCountLoading(false);\r\n            });\r\n    }, [isInit]);\r\n\r\n    useEffect(() => {\r\n        if(isInit) {\r\n            setIsNameLoading(true);\r\n            \r\n            if(inputValue === '') {\r\n                setIsNameLoading(false);\r\n                name(emptyStr);\r\n            }\r\n            else getOnePeopleName(inputValue)\r\n                            .then(() => {\r\n                                setIsNameLoading(false);\r\n                            });\r\n        };\r\n    }, [isInit, inputValue]);\r\n\r\n    return (\r\n        <div>\r\n            { isPeopleCountLoading && 'loading...' }\r\n            { \r\n                !isPeopleCountLoading && \r\n                <>\r\n                    <small>Работа с внешним API</small>\r\n                    <h1><mark>{ isNameLoading ? 'loading...' : (personName || '\\u00A0') }</mark></h1>\r\n                    <label>\r\n                        Хотите получить имя персонажа?<br />\r\n                        Введите его ID<br />\r\n                        <br />\r\n                        <small>Поддерживаемые ID: от 1 до { peopleCount } </small><br />\r\n                        <small>(и не включая 17) </small><br />\r\n                        <br />\r\n                        <input type=\"text\"\r\n                        min={ peopleCount ? 1 : 0 }\r\n                        max={ peopleCount || 1 }\r\n                        value={ inputValue || '' }\r\n                        onChange={ onInput }/>\r\n                    </label><br />\r\n                    <small>{ wrong && `${wrong} - wrong!` }</small>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): AppState => {\r\n    return {\r\n        personName: state.people.name,\r\n        peopleCount: state.people.peopleCount,\r\n        emptyStr: state.people.emptyStr,\r\n        isInit: state.people.isInit,\r\n    };\r\n};\r\n\r\nconst actions: AppActions & AppThunk = {\r\n    name,\r\n    init,\r\n    getOnePeopleName,\r\n    getPeopleCount,\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(App);","import App from \"./app\";\r\n\r\nexport default App;","import { INIT, InitAction } from \"../actions/is-init\";\r\nimport { NAME, NameAction } from \"../actions/name\";\r\nimport { COUNT, PeopleCountAction } from \"../actions/people-count\";\r\n\r\ntype StateName = string | null;\r\ntype StateCount = number | null;\r\nconst EMPTY = 'Empty';\r\ntype StateEmptyStr = typeof EMPTY;\r\ntype State = {\r\n    name: StateName\r\n    peopleCount: StateCount,\r\n    emptyStr: StateEmptyStr\r\n    isInit: boolean\r\n};\r\n\r\ntype ActionsList = NameAction | PeopleCountAction | InitAction;\r\nconst initialState: State = {\r\n    name: null,\r\n    peopleCount: null,\r\n    emptyStr: EMPTY,\r\n    isInit: false\r\n};\r\nconst people = (state: State = initialState, action: ActionsList ): State => {\r\n    switch(action.type) {\r\n        case NAME:\r\n            return {\r\n                ...state,\r\n                name: action.payload\r\n            };\r\n        case COUNT:\r\n            return {\r\n                ...state,\r\n                peopleCount: action.payload\r\n            };\r\n        case INIT:\r\n            return {\r\n                ...state,\r\n                isInit: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type {\r\n    StateName,\r\n    StateCount,\r\n    StateEmptyStr,\r\n    State,\r\n};\r\nexport default people;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport people from \"./reducers/people\";\r\n\r\nconst store = createStore(combineReducers({\r\n    people\r\n}), applyMiddleware(thunk));\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport default store;","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/app';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <Provider store={ store } >\r\n            <App startInputValue={ 4 }/>\r\n        </Provider>\r\n    </StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}